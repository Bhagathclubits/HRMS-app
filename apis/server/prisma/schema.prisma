generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "sqlserver"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model AddressType {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(64)
  createdAt   DateTime  @default(now()) @map("created_at")
  createdById Int       @map("created_by_id")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  updatedById Int       @map("updated_by_id")
  createdBy   User      @relation("AddressTypeCreatedByUser", fields: [createdById], references: [id], onUpdate: NoAction)
  updatedBy   User      @relation("AddressTypeUpdatedByUser", fields: [updatedById], references: [id], onUpdate: NoAction)
  addresses   Address[] @relation("AddressOfAddressType")

  @@map("address_type")
}

model Address {
  id            Int         @id @default(autoincrement())
  userId        Int         @map("user_id")
  addressTypeId Int         @map("address_type_id")
  street        String
  city          String
  state         String
  country       String
  pincode       String
  createdAt     DateTime    @default(now()) @map("created_at")
  createdById   Int         @map("created_by_id")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  updatedById   Int         @map("updated_by_id")
  addressType   AddressType @relation("AddressOfAddressType", fields: [addressTypeId], references: [id], onUpdate: NoAction)
  createdBy     User        @relation("AddressCreatedByUser", fields: [createdById], references: [id], onUpdate: NoAction)
  updatedBy     User        @relation("AddressUpdatedByUser", fields: [updatedById], references: [id], onUpdate: NoAction)
  user          User        @relation("AddressOfUser", fields: [userId], references: [id], onUpdate: NoAction)

  @@unique([userId, addressTypeId])
  @@map("addresses")
}

model Department {
  id            Int            @id @default(autoincrement())
  name          String         @unique @db.VarChar(64)
  createdAt     DateTime       @default(now()) @map("created_at")
  createdById   Int            @map("created_by_id")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  updatedById   Int            @map("updated_by_id")
  createdBy     User           @relation("DepartmentCreatedByUser", fields: [createdById], references: [id], onUpdate: NoAction)
  updatedBy     User           @relation("DepartmentUpdatedByUser", fields: [updatedById], references: [id], onUpdate: NoAction)
  designations  Designation[]  @relation("DesignationOfDepartment")
  personalInfos PersonalInfo[] @relation("PersonalInfoOfDepartment")

  @@map("departments")
}

model Designation {
  id            Int            @id @default(autoincrement())
  departmentId  Int            @map("department_id")
  name          String         @unique @db.VarChar(64)
  createdAt     DateTime       @default(now()) @map("created_at")
  createdById   Int            @map("created_by_id")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  updatedById   Int            @map("updated_by_id")
  createdBy     User           @relation("DesignationCreatedByUser", fields: [createdById], references: [id], onUpdate: NoAction)
  department    Department     @relation("DesignationOfDepartment", fields: [departmentId], references: [id], onUpdate: NoAction)
  updatedBy     User           @relation("DesignationUpdatedByUser", fields: [updatedById], references: [id], onUpdate: NoAction)
  personalInfos PersonalInfo[] @relation("PersonalInfoOfDesignation")

  @@map("designations")
}

model ExpenseType {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(64)
  createdAt   DateTime  @default(now()) @map("created_at")
  createdById Int       @map("created_by_id")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  updatedById Int       @map("updated_by_id")
  createdBy   User      @relation("ExpenseTypeCreatedByUser", fields: [createdById], references: [id], onUpdate: NoAction)
  updatedBy   User      @relation("ExpenseTypeUpdatedByUser", fields: [updatedById], references: [id], onUpdate: NoAction)
  expenses    Expense[] @relation("ExpenseOfExpenseType")

  @@map("expense_types")
}

model ExpenseStatus {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(64)
  createdAt   DateTime  @default(now()) @map("created_at")
  createdById Int       @map("created_by_id")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  updatedById Int       @map("updated_by_id")
  createdBy   User      @relation("ExpenseStatusCreatedByUser", fields: [createdById], references: [id], onUpdate: NoAction)
  updatedBy   User      @relation("ExpenseStatusUpdatedByUser", fields: [updatedById], references: [id], onUpdate: NoAction)
  expenses    Expense[] @relation("ExpenseOfExpenseStatus")

  @@map("expense_status")
}

model Expense {
  id       Int           @id @default(autoincrement())
  amount   Decimal       @db.Decimal
  userId   Int           @map("user_id")
  date     DateTime      @map("date")
  remarks  String?
  type     ExpenseType   @relation("ExpenseOfExpenseType", fields: [typeId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  typeId   Int           @map("type_id")
  status   ExpenseStatus @relation("ExpenseOfExpenseStatus", fields: [statusId], references: [id], onUpdate: NoAction)
  statusId Int           @map("status_id")

  //Audit Files
  createdAt   DateTime @default(now()) @map("created_at") @db.DateTime2
  createdById Int      @map("created_by_id")
  createdBy   User     @relation("ExpenseCreatedByUser", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        User     @relation("ExpenseOfUser", fields: [userId], references: [id], onUpdate: NoAction)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.DateTime2
  updatedById Int      @map("updated_by_id")
  updatedBy   User     @relation("ExpenseUpdatedByUser", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([userId, typeId, date])
  @@map("expense")
}

model RelationshipType {
  id            Int            @id @default(autoincrement())
  name          String         @unique @db.VarChar(64)
  createdAt     DateTime       @default(now()) @map("created_at")
  createdById   Int            @map("created_by_id")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  updatedById   Int            @map("updated_by_id")
  familyDetails FamilyDetail[] @relation("FamilyDetailOfRelationshipType")
  createdBy     User           @relation("RelationshipTypeCreatedByUser", fields: [createdById], references: [id], onUpdate: NoAction)
  updatedBy     User           @relation("RelationshipTypeUpdatedByUser", fields: [updatedById], references: [id], onUpdate: NoAction)

  @@map("relationship_types")
}

model FamilyDetail {
  id                 Int              @id @default(autoincrement())
  userId             Int              @map("user_id")
  relationshipTypeId Int              @map("relationship_type_id")
  name               String
  dateOfBirth        DateTime         @map("date_of_birth") @db.Date
  createdAt          DateTime         @default(now()) @map("created_at")
  createdById        Int              @map("created_by_id")
  updatedAt          DateTime         @updatedAt @map("updated_at")
  updatedById        Int              @map("updated_by_id")
  createdBy          User             @relation("FamilyDetailCreatedByUser", fields: [createdById], references: [id], onUpdate: NoAction)
  relationshipType   RelationshipType @relation("FamilyDetailOfRelationshipType", fields: [relationshipTypeId], references: [id])
  updatedBy          User             @relation("FamilyDetailUpdatedByUser", fields: [updatedById], references: [id], onUpdate: NoAction)
  user               User             @relation("FamilyDetailOfUser", fields: [userId], references: [id], onUpdate: NoAction)

  @@unique([userId, relationshipTypeId, name])
  @@map("family_details")
}

model LeaveType {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(64)
  daysAlloted Int      @map("days_alloted")
  createdAt   DateTime @default(now()) @map("created_at")
  createdById Int      @map("created_by_id")
  updatedAt   DateTime @updatedAt @map("updated_at")
  updatedById Int      @map("updated_by_id")
  createdBy   User     @relation("LeaveTypeCreatedByUser", fields: [createdById], references: [id], onUpdate: NoAction)
  updatedBy   User     @relation("LeaveTypeUpdatedByUser", fields: [updatedById], references: [id], onUpdate: NoAction)
  leaves      Leave[]  @relation("LeaveOfLeaveType")

  @@map("leave_types")
}

model LeaveStatus {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(64)
  createdAt   DateTime @default(now()) @map("created_at")
  createdById Int      @map("created_by_id")
  updatedAt   DateTime @updatedAt @map("updated_at")
  updatedById Int      @map("updated_by_id")
  createdBy   User     @relation("LeaveStatusCreatedByUser", fields: [createdById], references: [id], onUpdate: NoAction)
  updatedBy   User     @relation("LeaveStatusUpdatedByUser", fields: [updatedById], references: [id], onUpdate: NoAction)
  leaves      Leave[]  @relation("LeaveOfLeaveStatus")

  @@map("leave_statuses")
}

model Leave {
  id          Int         @id @default(autoincrement())
  userId      Int         @map("user_id")
  leaveTypeId Int         @map("leave_type_id")
  fromDate    DateTime    @map("from_date")
  toDate      DateTime    @map("to_date")
  noOfDays    Decimal     @map("no_of_days") @db.Decimal(18, 0)
  remarks     String?
  statusId    Int         @map("status_id")
  createdAt   DateTime    @default(now()) @map("created_at")
  createdById Int         @map("created_by_id")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  updatedById Int         @map("updated_by_id")
  createdBy   User        @relation("LeaveCreatedByUser", fields: [createdById], references: [id], onUpdate: NoAction)
  leaveType   LeaveType   @relation("LeaveOfLeaveType", fields: [leaveTypeId], references: [id], onUpdate: NoAction)
  status      LeaveStatus @relation("LeaveOfLeaveStatus", fields: [statusId], references: [id], onUpdate: NoAction)
  updatedBy   User        @relation("LeaveUpdatedByUser", fields: [updatedById], references: [id], onUpdate: NoAction)
  user        User        @relation("LeaveOfUser", fields: [userId], references: [id], onUpdate: NoAction)

  @@unique([userId, leaveTypeId, fromDate, toDate, noOfDays])
  @@map("leaves")
}

model TravelStatus {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(64)
  createdAt   DateTime @default(now()) @map("created_at")
  createdById Int      @map("created_by_id")
  updatedAt   DateTime @updatedAt @map("updated_at")
  updatedById Int      @map("updated_by_id")
  createdBy   User     @relation("TravelStatusCreatedByUser", fields: [createdById], references: [id], onUpdate: NoAction)
  updatedBy   User     @relation("TravelStatusUpdatedByUser", fields: [updatedById], references: [id], onUpdate: NoAction)
  travels     Travel[] @relation("TravelOfTravelStatus")

  @@map("travel_status")
}

model Travel {
  id          Int          @id @default(autoincrement())
  userId      Int          @map("user_id")
  place       String       @map("place") @db.VarChar(64)
  fromDate    DateTime     @map("from_date")
  toDate      DateTime     @map("to_date")
  remarks     String?      @map("remarks") @db.VarChar(1024)
  statusId    Int          @map("status_id")
  createdAt   DateTime     @default(now()) @map("created_at")
  createdById Int          @map("created_by_id")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  updatedById Int          @map("updated_by_id")
  createdBy   User         @relation("TravelCreatedByUser", fields: [createdById], references: [id], onUpdate: NoAction)
  status      TravelStatus @relation("TravelOfTravelStatus", fields: [statusId], references: [id], onUpdate: NoAction)
  updatedBy   User         @relation("TravelUpdatedByUser", fields: [updatedById], references: [id], onUpdate: NoAction)
  user        User         @relation("TravelOfUser", fields: [userId], references: [id], onUpdate: NoAction)

  @@unique([userId, fromDate, toDate])
  @@map("travel")
}

model PayRollStatus {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(64)
  createdAt   DateTime  @default(now()) @map("created_at")
  createdById Int       @map("created_by_id")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  updatedById Int       @map("updated_by_id")
  createdBy   User      @relation("PayRollStatusCreatedByUser", fields: [createdById], references: [id], onUpdate: NoAction)
  updatedBy   User      @relation("PayRollStatusUpdatedByUser", fields: [updatedById], references: [id], onUpdate: NoAction)
  payRolls    PayRoll[] @relation("PayRollOfPayRollStatus")

  importPaySlipComponents ImportPaySlipComponent[] @relation("ImportPaySlipComponentOfPayRollStatus")

  @@map("pay_roll_statuses")
}

model PayRoll {
  id                Int                @id @default(autoincrement())
  user              User               @relation("PayRollOfUser", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId            Int                @map("user_id")
  year              Int
  month             Int
  status            PayRollStatus      @relation("PayRollOfPayRollStatus", fields: [statusId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  statusId          Int                @map("status_id")
  paySlipComponents PaySlipComponent[] @relation("PaySlipComponentOfPayRoll")

  // Audit Fields
  createdAt   DateTime @default(now()) @map("created_at") @db.DateTime2
  createdBy   User     @relation("PayRollCreatedByUser", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdById Int      @map("created_by_id")
  updatedAt   DateTime @updatedAt @map("updated_at") @db.DateTime2
  updatedById Int      @map("updated_by_id")
  updatedBy   User     @relation("PayRollUpdatedByUser", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([userId, year, month])
  @@map("pay_rolls")
}

model PersonalInfo {
  id                     Int         @id @default(autoincrement())
  userId                 Int         @unique @map("user_id")
  imageUrl               String?     @map("image_url")
  firstName              String      @map("first_name") @db.VarChar(32)
  middleName             String?     @map("middle_name") @db.VarChar(32)
  lastName               String      @map("last_name") @db.VarChar(32)
  dateOfBirth            DateTime    @map("date_of_birth") @db.Date
  dateOfJoining          DateTime    @map("date_of_joining") @db.Date
  departmentId           Int         @map("department_id")
  designationId          Int         @map("designation_id")
  reportingManagerUserId Int         @map("reporting_manager_user_id")
  createdAt              DateTime    @default(now()) @map("created_at")
  createdById            Int         @map("created_by_id")
  updatedAt              DateTime    @updatedAt @map("updated_at")
  updatedById            Int         @map("updated_by_id")
  createdBy              User        @relation("PersonalInfoCreatedByUser", fields: [createdById], references: [id], onUpdate: NoAction)
  department             Department  @relation("PersonalInfoOfDepartment", fields: [departmentId], references: [id], onUpdate: NoAction)
  designation            Designation @relation("PersonalInfoOfDesignation", fields: [designationId], references: [id], onUpdate: NoAction)
  reportingManager       User        @relation("ReportingManagerOfUser", fields: [reportingManagerUserId], references: [id], onUpdate: NoAction)
  updatedBy              User        @relation("PersonalInfoUpdatedByUser", fields: [updatedById], references: [id], onUpdate: NoAction)
  user                   User        @relation("PersonalInfoOfUser", fields: [userId], references: [id], onUpdate: NoAction)

  @@map("personal_infos")
}

model Qualification {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(128)
  userId      Int      @map("user_id")
  createdAt   DateTime @default(now()) @map("created_at")
  createdById Int      @map("created_by_id")
  updatedAt   DateTime @updatedAt @map("updated_at")
  updatedById Int      @map("updated_by_id")
  createdBy   User     @relation("QualificationCreatedByUser", fields: [createdById], references: [id], onUpdate: NoAction)
  updatedBy   User     @relation("QualificationUpdatedByUser", fields: [updatedById], references: [id], onUpdate: NoAction)
  user        User     @relation("QualificationOfUser", fields: [userId], references: [id], onUpdate: NoAction)

  @@unique([name, userId])
  @@map("qualifications")
}

model PaySlipComponentType {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(64)

  paySlips PaySlipComponent[] @relation("PaySlipComponentOfPaySlipComponentType")

  importPaySlips ImportPaySlipComponent[] @relation("ImportPaySlipComponentOfPaySlipComponentType")

  //Audit Files
  createdAt   DateTime @default(now()) @map("created_at") @db.DateTime2
  createdById Int      @map("created_by_id")
  createdBy   User     @relation("PaySlipComponentTypeCreatedByUser", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.DateTime2
  updatedById Int      @map("updated_by_id")
  updatedBy   User     @relation("PaySlipComponentTypeUpdatedByUser", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("pay_slip_component_types")
}

model PaySlipComponent {
  id              Int                  @id @default(autoincrement())
  componentType   PaySlipComponentType @relation("PaySlipComponentOfPaySlipComponentType", fields: [componentTypeId], references: [id])
  componentTypeId Int                  @map("component_type_id")
  payRoll         PayRoll              @relation("PaySlipComponentOfPayRoll", fields: [payRollId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  payRollId       Int                  @map("pay_roll_id")
  amount          Decimal              @db.Decimal

  //Audit Files
  createdAt   DateTime @default(now()) @map("created_at") @db.DateTime2
  createdById Int      @map("created_by_id")
  createdBy   User     @relation("PaySlipComponentCreatedByUser", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.DateTime2
  updatedById Int      @map("updated_by_id")
  updatedBy   User     @relation("PaySlipComponentUpdatedByUser", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([componentTypeId, payRollId])
  @@map("pay_slip_components")
}

model ImportPaySlipComponent {
  id              Int                  @id @default(autoincrement())
  componentType   PaySlipComponentType @relation("ImportPaySlipComponentOfPaySlipComponentType", fields: [componentTypeId], references: [id])
  componentTypeId Int                  @map("component_type_id")
  amount          Decimal              @db.Decimal
  user            User                 @relation("ImportPaySlipComponentOfUser", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId          Int                  @map("user_id")
  year            Int
  month           Int
  status          PayRollStatus        @relation("ImportPaySlipComponentOfPayRollStatus", fields: [statusId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  statusId        Int                  @map("status_id")

  @@unique([componentTypeId, userId])
  @@map("import_pay_slip_components")
}

model IdentificationType {
  id              Int              @id @default(autoincrement())
  name            String           @unique @db.VarChar(128)
  createdAt       DateTime         @default(now()) @map("created_at")
  createdById     Int              @map("created_by_id")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  updatedById     Int              @map("updated_by_id")
  createdBy       User             @relation("IdentificationTypeCreatedByUser", fields: [createdById], references: [id], onUpdate: NoAction)
  updatedBy       User             @relation("IdentificationTypeUpdatedByUser", fields: [updatedById], references: [id], onUpdate: NoAction)
  identifications Identification[] @relation("IdentificationOfIdentificationType")

  @@map("identification_types")
}

model Identification {
  id          Int                @id @default(autoincrement())
  imageUrl    String?            @map("image_url")
  typeId      Int                @map("type_id")
  number      String             @unique @db.VarChar(128)
  userId      Int                @map("user_id")
  createdAt   DateTime           @default(now()) @map("created_at")
  createdById Int                @map("created_by_id")
  updatedAt   DateTime           @updatedAt @map("updated_at")
  updatedById Int                @map("updated_by_id")
  createdBy   User               @relation("IdentificationCreatedByUser", fields: [createdById], references: [id], onUpdate: NoAction)
  type        IdentificationType @relation("IdentificationOfIdentificationType", fields: [typeId], references: [id], onUpdate: NoAction)
  updatedBy   User               @relation("IdentificationUpdatedByUser", fields: [updatedById], references: [id], onUpdate: NoAction)
  user        User               @relation("IdentificationOfUser", fields: [userId], references: [id], onUpdate: NoAction)

  @@unique([userId, typeId])
  @@map("identifications")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  createdAt   DateTime @default(now()) @map("created_at")
  createdById Int?     @map("created_by_id")
  updatedAt   DateTime @updatedAt @map("updated_at")
  updatedById Int?     @map("updated_by_id")
  createdBy   User?    @relation("RoleCreatedByUser", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedBy   User?    @relation("RoleUpdatedByUser", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users       User[]   @relation("UserOfRole")

  @@map("roles")
}

model HelpDeskCategory {
  id          Int        @id @default(autoincrement())
  name        String     @unique @db.VarChar(64)
  createdAt   DateTime   @default(now()) @map("created_at")
  createdById Int        @map("created_by_id")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  updatedById Int        @map("updated_by_id")
  createdBy   User       @relation("HelpDeskCategoryCreatedByUser", fields: [createdById], references: [id], onUpdate: NoAction)
  updatedBy   User       @relation("HelpDeskCategoryUpdatedByUser", fields: [updatedById], references: [id], onUpdate: NoAction)
  helpDesks   HelpDesk[] @relation("HelpDeskOfHelpDeskCategory")

  @@map("help_desk_categories")
}

model HelpDeskStatus {
  id          Int        @id @default(autoincrement())
  name        String     @unique @db.VarChar(64)
  createdAt   DateTime   @default(now()) @map("created_at")
  createdById Int        @map("created_by_id")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  updatedById Int        @map("updated_by_id")
  createdBy   User       @relation("HelpDeskStatusCreatedByUser", fields: [createdById], references: [id], onUpdate: NoAction)
  updatedBy   User       @relation("HelpDeskStatusUpdatedByUser", fields: [updatedById], references: [id], onUpdate: NoAction)
  helpDesks   HelpDesk[] @relation("HelpDeskOfHelpDeskStatus")

  @@map("help_desk_statuses")
}

model HelpDesk {
  id          Int              @id @default(autoincrement())
  userId      Int              @map("user_id")
  date        DateTime         @map("date") @db.Date
  title       String           @map("title") @db.VarChar(128)
  description String           @map("description") @db.VarChar(2048)
  remarks     String?          @map("remarks") @db.VarChar(1024)
  categoryId  Int              @map("category_id")
  statusId    Int              @map("status_id")
  createdAt   DateTime         @default(now()) @map("created_at")
  createdById Int              @map("created_by_id")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  updatedById Int              @map("updated_by_id")
  category    HelpDeskCategory @relation("HelpDeskOfHelpDeskCategory", fields: [categoryId], references: [id], onUpdate: NoAction)
  createdBy   User             @relation("HelpDeskCreatedByUser", fields: [createdById], references: [id], onUpdate: NoAction)
  status      HelpDeskStatus   @relation("HelpDeskOfHelpDeskStatus", fields: [statusId], references: [id], onUpdate: NoAction)
  updatedBy   User             @relation("HelpDeskUpdatedByUser", fields: [updatedById], references: [id], onUpdate: NoAction)
  user        User             @relation("HelpDeskOfUser", fields: [userId], references: [id], onUpdate: NoAction)

  @@map("help_desks")
}

model TimeSheetStatus {
  id          Int         @id @default(autoincrement())
  name        String      @unique @db.VarChar(64)
  createdAt   DateTime    @default(now()) @map("created_at")
  createdById Int         @map("created_by_id")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  updatedById Int         @map("updated_by_id")
  createdBy   User        @relation("TimeSheetStatusCreatedByUser", fields: [createdById], references: [id], onUpdate: NoAction)
  updatedBy   User        @relation("TimeSheetStatusUpdatedByUser", fields: [updatedById], references: [id], onUpdate: NoAction)
  timeSheets  TimeSheet[] @relation("TimeSheetOfTimeSheetStatus")

  @@map("time_sheet_statuses")
}

model TimeSheet {
  id          Int             @id @default(autoincrement())
  userId      Int             @map("user_id")
  inTime      DateTime?       @map("in_time")
  outTime     DateTime?       @map("out_time")
  statusId    Int             @map("status_id")
  createdAt   DateTime        @default(now()) @map("created_at")
  createdById Int             @map("created_by_id")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  updatedById Int             @map("updated_by_id")
  createdBy   User            @relation("TimeSheetCreatedByUser", fields: [createdById], references: [id], onUpdate: NoAction)
  status      TimeSheetStatus @relation("TimeSheetOfTimeSheetStatus", fields: [statusId], references: [id], onUpdate: NoAction)
  updatedBy   User            @relation("TimeSheetUpdatedByUser", fields: [updatedById], references: [id], onUpdate: NoAction)
  user        User            @relation("TimeSheetOfUser", fields: [userId], references: [id], onUpdate: NoAction)

  @@unique([userId, inTime, outTime])
  @@map("time_sheets")
}

model Team {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(64)
  createdAt   DateTime @default(now()) @map("created_at")
  createdById Int      @map("created_by_id")
  updatedAt   DateTime @updatedAt @map("updated_at")
  updatedById Int      @map("updated_by_id")
  task        Task[]   @relation("TaskOfTeam")
  createdBy   User     @relation("TeamCreatedByUser", fields: [createdById], references: [id], onUpdate: NoAction)
  updatedBy   User     @relation("TeamUpdatedByUser", fields: [updatedById], references: [id], onUpdate: NoAction)

  @@map("task_billed_team")
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(64)
  createdAt   DateTime @default(now()) @map("created_at")
  createdById Int      @map("created_by_id")
  updatedAt   DateTime @updatedAt @map("updated_at")
  updatedById Int      @map("updated_by_id")
  task        Task[]   @relation("TaskOfProject")
  createdBy   User     @relation("ProjectCreatedByUser", fields: [createdById], references: [id], onUpdate: NoAction)
  updatedBy   User     @relation("ProjectUpdatedByUser", fields: [updatedById], references: [id], onUpdate: NoAction)

  @@map("task_project")
}

model Task {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  projectId    Int      @map("project_id")
  date         DateTime @map("task_date")
  name         String   @map("task_name") @db.VarChar(64)
  description  String   @map("task_description") @db.VarChar(256)
  noOfHours    Decimal  @map("no_of_hours") @db.Decimal(18, 0)
  remarks      String   @map("remarks") @db.Text
  billedTeamId Int      @map("team_id")
  createdAt    DateTime @default(now()) @map("created_at")
  createdById  Int      @map("created_by_id")
  updatedAt    DateTime @updatedAt @map("updated_at")
  updatedById  Int      @map("updated_by_id")
  createdBy    User     @relation("TaskCreatedByUser", fields: [createdById], references: [id], onUpdate: NoAction)
  project      Project  @relation("TaskOfProject", fields: [projectId], references: [id], onUpdate: NoAction)
  billedTeam   Team     @relation("TaskOfTeam", fields: [billedTeamId], references: [id], onUpdate: NoAction)
  updatedBy    User     @relation("TaskUpdatedByUser", fields: [updatedById], references: [id], onUpdate: NoAction)
  user         User     @relation("TaskOfUser", fields: [userId], references: [id], onUpdate: NoAction)

  @@map("task")
}

model Company {
  id            Int           @id @default(autoincrement())
  name          String        @unique @db.VarChar(64)
  createdAt     DateTime      @default(now()) @map("created_at")
  createdById   Int           @map("created_by_id")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  updatedById   Int           @map("updated_by_id")
  createdBy     User          @relation("CompanyCreatedByUser", fields: [createdById], references: [id], onUpdate: NoAction)
  updatedBy     User          @relation("CompanyUpdatedByUser", fields: [updatedById], references: [id], onUpdate: NoAction)
  hrs           Hr[]          @relation("CompanyOfHr")
  visitorPasses VisitorPass[] @relation("CompanyOfVisitorPass")

  @@map("companies")
}

model Hr {
  id            Int           @id @default(autoincrement())
  companyId     Int           @map("company_id")
  createdAt     DateTime      @default(now()) @map("created_at")
  createdById   Int           @map("created_by_id")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  updatedById   Int           @map("updated_by_id")
  userId        Int           @unique @map("user_id")
  companies     Company       @relation("CompanyOfHr", fields: [companyId], references: [id], onUpdate: NoAction)
  createdBy     User          @relation("HrCreatedByUser", fields: [createdById], references: [id], onUpdate: NoAction)
  updatedBy     User          @relation("HrUpdatedByUser", fields: [updatedById], references: [id], onUpdate: NoAction)
  user          User          @relation("UserOfHr", fields: [userId], references: [id], onUpdate: NoAction)
  visitorPasses VisitorPass[] @relation("HrOfVisitorPass")

  @@map("hrs")
}

model VisitorPassStatus {
  id            Int           @id @default(autoincrement())
  name          String        @unique @db.VarChar(64)
  createdAt     DateTime      @default(now()) @map("created_at")
  createdById   Int           @map("created_by_id")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  updatedById   Int           @map("updated_by_id")
  createdBy     User          @relation("VisitorPassStatusCreatedByUser", fields: [createdById], references: [id], onUpdate: NoAction)
  updatedBy     User          @relation("VisitorPassStatusUpdatedByUser", fields: [updatedById], references: [id], onUpdate: NoAction)
  visitorPasses VisitorPass[] @relation("VisitorPassOfVisitorPassStatus")

  @@map("visitor_pass_status")
}

model VisitorPass {
  id           Int               @id @default(autoincrement())
  name         String            @db.VarChar(64)
  imageUrl     String?           @map("image_url")
  hrId         Int               @map("hr_name_id")
  date         DateTime          @map("visitor_date")
  companyId    Int               @map("hr_company")
  fromPlace    String            @map("from_place") @db.VarChar(64)
  inTime       DateTime          @map("in_time")
  status       VisitorPassStatus @relation("VisitorPassOfVisitorPassStatus", fields: [statusId], references: [id], onUpdate: NoAction)
  statusId     Int               @map("status_id")
  createdAt    DateTime          @default(now()) @map("created_at")
  createdById  Int               @map("created_by_id")
  updatedAt    DateTime          @updatedAt @map("updated_at")
  updatedById  Int               @map("updated_by_id")
  mobileNumber String            @map("mobile_number") @db.VarChar(16)
  outTime      DateTime?         @map("out_time")
  reason       String            @map("reason") @db.VarChar(1024)
  remarks      String?           @map("remarks") @db.VarChar(1024)
  createdBy    User              @relation("VisitorCreatedByUser", fields: [createdById], references: [id], onUpdate: NoAction)
  company      Company           @relation("CompanyOfVisitorPass", fields: [companyId], references: [id], onUpdate: NoAction)
  hr           Hr                @relation("HrOfVisitorPass", fields: [hrId], references: [id], onUpdate: NoAction)
  updatedBy    User              @relation("VisitorUpdatedByUser", fields: [updatedById], references: [id], onUpdate: NoAction)

  @@map("visitor_passes")
}

model UserStatus {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(64)
  createdAt   DateTime @default(now()) @map("created_at")
  createdById Int      @map("created_by_id")
  updatedAt   DateTime @updatedAt @map("updated_at")
  updatedById Int      @map("updated_by_id")
  createdBy   User     @relation("UserStatusCreatedByUser", fields: [createdById], references: [id], onUpdate: NoAction)
  updatedBy   User     @relation("UserStatusUpdatedByUser", fields: [updatedById], references: [id], onUpdate: NoAction)
  users       User[]   @relation("UserOfUserStatus")

  @@map("user_statuses")
}

model User {
  id       Int         @id @default(autoincrement())
  username String      @unique @db.VarChar(64)
  password String
  role     Role        @relation("UserOfRole", fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roleId   Int         @map("role_id")
  name     String
  mobile   String?     @db.VarChar(32)
  email    String?     @db.VarChar(256)
  otp      String?     @db.VarChar(8)
  status   UserStatus? @relation("UserOfUserStatus", fields: [statusId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  statusId Int?        @map("status_id")

  addresses           Address[]     @relation("AddressOfUser")
  addressesCreated    Address[]     @relation("AddressCreatedByUser")
  addressesUpdated    Address[]     @relation("AddressUpdatedByUser")
  departmentsCreated  Department[]  @relation("DepartmentCreatedByUser")
  departmentsUpdated  Department[]  @relation("DepartmentUpdatedByUser")
  designationsCreated Designation[] @relation("DesignationCreatedByUser")
  designationsUpdated Designation[] @relation("DesignationUpdatedByUser")
  expenses            Expense[]     @relation("ExpenseOfUser")
  expensesCreated     Expense[]     @relation("ExpenseCreatedByUser")
  expensesUpdated     Expense[]     @relation("ExpenseUpdatedByUser")

  travels        Travel[] @relation("TravelOfUser")
  travelsCreated Travel[] @relation("TravelCreatedByUser")
  travelsUpdated Travel[] @relation("TravelUpdatedByUser")

  familyDetails                FamilyDetail[]           @relation("FamilyDetailOfUser")
  familyDetailsCreated         FamilyDetail[]           @relation("FamilyDetailCreatedByUser")
  familyDetailsUpdated         FamilyDetail[]           @relation("FamilyDetailUpdatedByUser")
  leaveTypesCreated            LeaveType[]              @relation("LeaveTypeCreatedByUser")
  leaveTypesUpdated            LeaveType[]              @relation("LeaveTypeUpdatedByUser")
  leaves                       Leave[]                  @relation("LeaveOfUser")
  leavesCreated                Leave[]                  @relation("LeaveCreatedByUser")
  leavesUpdated                Leave[]                  @relation("LeaveUpdatedByUser")
  payRolls                     PayRoll[]                @relation("PayRollOfUser")
  payRollsCreated              PayRoll[]                @relation("PayRollCreatedByUser")
  payRollsUpdated              PayRoll[]                @relation("PayRollUpdatedByUser")
  task                         Task[]                   @relation("TaskOfUser")
  taskCreated                  Task[]                   @relation("TaskCreatedByUser")
  taskUpdated                  Task[]                   @relation("TaskUpdatedByUser")
  personalInfo                 PersonalInfo?            @relation("PersonalInfoOfUser")
  personalInfosCreated         PersonalInfo[]           @relation("PersonalInfoCreatedByUser")
  personalInfosUpdated         PersonalInfo[]           @relation("PersonalInfoUpdatedByUser")
  qualifications               Qualification[]          @relation("QualificationOfUser")
  qualificationsCreated        Qualification[]          @relation("QualificationCreatedByUser")
  qualificationsUpdated        Qualification[]          @relation("QualificationUpdatedByUser")
  identificationTypesCreated   IdentificationType[]     @relation("IdentificationTypeCreatedByUser")
  identificationTypesUpdated   IdentificationType[]     @relation("IdentificationTypeUpdatedByUser")
  identifications              Identification[]         @relation("IdentificationOfUser")
  identificationsCreated       Identification[]         @relation("IdentificationCreatedByUser")
  identificationsUpdated       Identification[]         @relation("IdentificationUpdatedByUser")
  importPaySlipComponents      ImportPaySlipComponent[] @relation("ImportPaySlipComponentOfUser")
  paySlipComponentsCreated     PaySlipComponent[]       @relation("PaySlipComponentCreatedByUser")
  paySlipComponentsUpdated     PaySlipComponent[]       @relation("PaySlipComponentUpdatedByUser")
  paySlipComponentTypesCreated PaySlipComponentType[]   @relation("PaySlipComponentTypeCreatedByUser")
  paySlipComponentTypesUpdated PaySlipComponentType[]   @relation("PaySlipComponentTypeUpdatedByUser")
  rolesCreated                 Role[]                   @relation("RoleCreatedByUser")
  rolesUpdated                 Role[]                   @relation("RoleUpdatedByUser")
  helpDesks                    HelpDesk[]               @relation("HelpDeskOfUser")
  helpDesksCreated             HelpDesk[]               @relation("HelpDeskCreatedByUser")
  helpDesksUpdated             HelpDesk[]               @relation("HelpDeskUpdatedByUser")
  // sessions             Session[]           @relation("SessionOfUser")
  subordinates                 PersonalInfo[]           @relation("ReportingManagerOfUser")
  timeSheets                   TimeSheet[]              @relation("TimeSheetOfUser")
  timeSheetsCreated            TimeSheet[]              @relation("TimeSheetCreatedByUser")
  timeSheetsUpdated            TimeSheet[]              @relation("TimeSheetUpdatedByUser")
  usersCreated                 User[]                   @relation("UserCreatedByUser")
  usersUpdated                 User[]                   @relation("UserUpdatedByUser")
  hr                           Hr[]                     @relation("UserOfHr")

  // Audit Fields
  createdAt   DateTime @default(now()) @map("created_at") @db.DateTime2
  createdById Int?     @map("created_by_id")
  createdBy   User?    @relation("UserCreatedByUser", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.DateTime2
  updatedById Int?     @map("updated_by_id")
  updatedBy   User?    @relation("UserUpdatedByUser", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: NoAction)

  addressTypesCreated      AddressType[]      @relation("AddressTypeCreatedByUser")
  addressTypesUpdated      AddressType[]      @relation("AddressTypeUpdatedByUser")
  relationshipTypesCreated RelationshipType[] @relation("RelationshipTypeCreatedByUser")
  relationshipTypesUpdated RelationshipType[] @relation("RelationshipTypeUpdatedByUser")
  leaveStatusesCreated     LeaveStatus[]      @relation("LeaveStatusCreatedByUser")
  leaveStatusesUpdated     LeaveStatus[]      @relation("LeaveStatusUpdatedByUser")
  payRollStatusesCreated   PayRollStatus[]    @relation("PayRollStatusCreatedByUser")
  payRollStatusesUpdated   PayRollStatus[]    @relation("PayRollStatusUpdatedByUser")

  billedTeamCreated          Team[]              @relation("TeamCreatedByUser")
  billedTeamUpdated          Team[]              @relation("TeamUpdatedByUser")
  projectCreated             Project[]           @relation("ProjectCreatedByUser")
  projectUpdated             Project[]           @relation("ProjectUpdatedByUser")
  timeSheetStatusesCreated   TimeSheetStatus[]   @relation("TimeSheetStatusCreatedByUser")
  timeSheetStatusesUpdated   TimeSheetStatus[]   @relation("TimeSheetStatusUpdatedByUser")
  userStatusesCreated        UserStatus[]        @relation("UserStatusCreatedByUser")
  userStatusesUpdated        UserStatus[]        @relation("UserStatusUpdatedByUser")
  helpDeskCategoriesCreated  HelpDeskCategory[]  @relation("HelpDeskCategoryCreatedByUser")
  helpDeskCategoriesUpdated  HelpDeskCategory[]  @relation("HelpDeskCategoryUpdatedByUser")
  helpDeskStatusesCreated    HelpDeskStatus[]    @relation("HelpDeskStatusCreatedByUser")
  helpDeskStatusesUpdated    HelpDeskStatus[]    @relation("HelpDeskStatusUpdatedByUser")
  // blockCreatedByUser         Block[]           @relation("BlockCreatedByUser")
  // blockUpdatedByUser         Block[]           @relation("BlockUpdatedByUser")
  // entryCategoryCreatedByUser EntryCategory[]   @relation("EntryCategoryCreatedByUser")
  // entryCategoryUpdatedByUser EntryCategory[]   @relation("EntryCategoryUpdatedByUser")
  companyCreatedByUser       Company[]           @relation("CompanyCreatedByUser")
  companyUpdatedByUser       Company[]           @relation("CompanyUpdatedByUser")
  hrNameCreatedByUser        Hr[]                @relation("HrCreatedByUser")
  hrNameUpdatedByUser        Hr[]                @relation("HrUpdatedByUser")
  visitorCreated             VisitorPass[]       @relation("VisitorCreatedByUser")
  visitorUpdated             VisitorPass[]       @relation("VisitorUpdatedByUser")
  visitorPassStatusesCreated VisitorPassStatus[] @relation("VisitorPassStatusCreatedByUser")
  visitorPassStatusesUpdated VisitorPassStatus[] @relation("VisitorPassStatusUpdatedByUser")
  travelStatusesCreated      TravelStatus[]      @relation("TravelStatusCreatedByUser")
  travelStatusesUpdated      TravelStatus[]      @relation("TravelStatusUpdatedByUser")

  expenseStatusesCreated ExpenseStatus[] @relation("ExpenseStatusCreatedByUser")
  expenseStatusesUpdated ExpenseStatus[] @relation("ExpenseStatusUpdatedByUser")
  expenseTypesCreated    ExpenseType[]   @relation("ExpenseTypeCreatedByUser")
  ExpenseTypesUpdated    ExpenseType[]   @relation("ExpenseTypeUpdatedByUser")

  @@unique([username, mobile])
  @@unique([username, email])
  @@map("users")
}
